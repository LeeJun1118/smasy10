plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'eclipse'
    id "com.moowork.node" version "1.3.1"
}

apply plugin: "com.moowork.node"

group = 'com.smasy10'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
/*
    - compile → 먼저 compile 시점에 필요한 디펜던시 라이브러리들을 compile로 정의합니다.
    - runtime → 런타임 시에 참조할 라이브러리를 정의합니다. 기본적으로 compile 라이브러리를 포함합니다.
    - compileOnly → 컴파일 시점에만 사용하고 런타임에는 필요없는 라이브러리를 정의합니다.
    - testCompile → 프로젝트의 테스트를 위한 디펜던시 라이브러리를 정의합니다. 기본적으로 Compile된 클래스와 compile 라이브러리를 포함합니다.
*/

    //스프링부트요 Spring Data JPA 추상화 라이브러리
    //스프링부트의 버전에 맞춰 자동의 JPA 관련 라이브러리들의 버전을 관리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //세션 저장소를 jdbc 를 사용
    compile('org.springframework.session:spring-session-jdbc')

    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Getter,Setter,기본생성자,toString,Builder 등을 어노테이션으로 자동 생성
    compile('org.projectlombok:lombok')

    //소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
    //compile 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //소스가 변할때 마다 자동으로 서버 재가동
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compile('com.h2database:h2')

    compile("org.mariadb.jdbc:mariadb-java-client")
/*
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.boot:spring-boot-configuration-processor'*/
    
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}


//Connect Spring Boot + React
def webappDir = "$projectDir/frontend/front"

task appNpmInstall(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ["run", "build"]
}

task copyWebApp(type: Copy) {
    from 'frontend/front/build'
    into "build/resources/main/static"
//    into "src/main/resources/static"
}

copyWebApp.dependsOn(appNpmInstall)
compileJava.dependsOn(copyWebApp)
